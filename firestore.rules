rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions for roles and authentication
    function isAuthenticated() {
      return request.auth != null;
    }

    function isAdmin() {
      return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isReviewer() {
      return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'reviewer';
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Users Collection: Stores all registered users (Admins, Reviewers, Artists).
    match /users/{userId} {
      // Read: User can read their own profile. Admins can read all.
      allow read: if isOwner(userId) || isAdmin();
      // Create: Allow any authenticated user to create their own user profile on signup.
      allow create: if isAuthenticated();
      // Update: User can update their own profile. Admins can update all.
      allow update: if isOwner(userId) || isAdmin();
      // Delete: Admin only.
      allow delete: if isAdmin();
    }

    // Reviewers Collection: Public profiles for verified reviewers.
    match /reviewers/{reviewerId} {
      // Read: Public read access.
      allow read: if true;
      // Create: Reviewers can create their own profile (after application approval). Admins too.
      allow create: if isReviewer() || isAdmin();
      // Update: Reviewers can update their own profile. Admins too.
      allow update: if isOwner(reviewerId) || isAdmin();
      // Delete: Admin only.
      allow delete: if isAdmin();
    }

    // Applications Collection: Stores applications from users wanting to become reviewers.
    match /applications/{applicationId} {
      // Read: Admin can read all. User can read their own application status.
      allow read: if isAdmin() || isOwner(resource.data.userId);
      // Create: Any authenticated user can apply.
      allow create: if isAuthenticated();
      // Update: Only admin can update application status.
      allow update: if isAdmin();
      // Delete: Admin only.
      allow delete: if isAdmin();
    }

    // Submissions Collection: Tracks every music submission from artists.
    match /submissions/{submissionId} {
      // Read: Admin can read all. Artist can read their own submissions. Assigned reviewer can read submissions assigned to them.
      allow read: if isAdmin() || isOwner(resource.data.artistId) || (isReviewer() && request.auth.uid == resource.data.reviewerId);
      // Create: Handled by Stripe webhook (service account), so no explicit client-side rule needed here.
      // Update: Assigned reviewer can update status (e.g., "Reviewed"). Admin can update all.
      allow update: if isAdmin() || (isReviewer() && request.auth.uid == resource.data.reviewerId);
      // Delete: Admin only.
      allow delete: if isAdmin();
    }

    // Reviews Collection: Stores the detailed feedback provided by reviewers.
    match /reviews/{reviewId} {
      // Read: Public read access.
      allow read: if true;
      // Create: Reviewer creates their own review. Admin too.
      allow create: if isAdmin() || (isReviewer() && request.resource.data.reviewerId == request.auth.uid);
      // Update: Reviewer can update their own review. Admin too.
      allow update: if isAdmin() || (isReviewer() && request.auth.uid == resource.data.reviewerId);
      // Delete: Admin only.
      allow delete: if isAdmin();
    }

    // Payouts Collection: Records of payments made to reviewers.
    match /payouts/{payoutId} {
      // Read: Admin only. Reviewer can read their own payouts.
      allow read: if isAdmin() || (isReviewer() && request.auth.uid == resource.data.reviewerId);
      // Create: Admin only.
      allow create: if isAdmin();
      // Update: Admin only.
      allow update: if isAdmin();
      // Delete: Admin only.
      allow delete: if isAdmin();
    }

    // ReferralCodes Collection: Single-use codes for tracking reviewer recruitment.
    match /referralCodes/{codeId} {
      // Read: Admin can read all. User can read their own codes.
      allow read: if isAdmin() || isOwner(resource.data.userId);
      // Create: Admin only.
      allow create: if isAdmin();
      // Update: Admin only.
      allow update: if isAdmin();
      // Delete: Admin only.
      allow delete: if isAdmin();
    }

    // AppSettings Collection: General application settings.
    match /settings/{settingId} {
      // Read: Public read access for all users.
      allow read: if true;
      // Write: Admin only.
      allow write: if isAdmin();
    }
  }
}